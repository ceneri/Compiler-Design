Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_DECLID
   TOK_PARAMLIST
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_VARDECL
   TOK_RETURNVOID
   TOK_NEWSTRING
   TOK_INDEX


State 53 conflicts: 1 reduce/reduce
State 129 conflicts: 18 reduce/reduce
State 131 conflicts: 22 reduce/reduce
State 134 conflicts: 22 reduce/reduce
State 138 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT fielddecls '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 fielddecls: fielddecls fielddecl ';'
   11           | '{' fielddecl ';'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_CHAR
   18         | TOK_IDENT

   19 function: identdecl params ')' block
   20         | identdecl '(' ')' block
   21         | identdecl params ')' ';'
   22         | identdecl '(' ')' ';'

   23 params: params ',' identdecl
   24       | '(' identdecl

   25 identdecl: basetype TOK_ARRAY TOK_IDENT
   26          | basetype TOK_IDENT

   27 block: statements '}'
   28      | '{' '}'
   29      | ';'

   30 statements: statements statement
   31           | '{' statement

   32 statement: block
   33          | vardecl
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement
   41       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN expr ';'

   44 expr: binop
   45     | unop
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: expr '=' expr
   52      | expr TOK_EQ expr
   53      | expr TOK_NE expr
   54      | expr TOK_LT expr
   55      | expr TOK_LE expr
   56      | expr TOK_GT expr
   57      | expr TOK_GE expr
   58      | expr '+' expr
   59      | expr '-' expr
   60      | expr '*' expr
   61      | expr '/' expr
   62      | expr '%' expr

   63 unop: '+' expr
   64     | '-' expr
   65     | '!' expr
   66     | TOK_NEW expr

   67 allocator: TOK_NEW TOK_IDENT '(' ')'
   68          | TOK_NEW TOK_STRING '(' expr ')'
   69          | TOK_NEW basetype '[' expr ']'

   70 call: TOK_IDENT '(' ')'
   71     | multiexpr ')'

   72 multiexpr: multiexpr ',' expr
   73          | TOK_IDENT '(' expr

   74 variable: TOK_IDENT
   75         | expr '[' expr ']'
   76         | expr '.' TOK_IDENT

   77 constant: TOK_INTCON
   78         | TOK_CHARCON
   79         | TOK_STRINGCON
   80         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 65
'%' (37) 62
'(' (40) 20 22 24 39 40 41 48 67 68 70 73
')' (41) 19 20 21 22 39 40 41 48 67 68 70 71
'*' (42) 60
'+' (43) 58 63
',' (44) 23 72
'-' (45) 59 64
'.' (46) 76
'/' (47) 61
';' (59) 6 10 11 21 22 29 37 38 42 43
'=' (61) 38 51
'[' (91) 69 75
']' (93) 69 75
'{' (123) 9 11 28 31
'}' (125) 5 8 9 27 28
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 17
TOK_INT (260) 15
TOK_STRING (261) 16 68
TOK_IF (262) 40 41
TOK_ELSE (263) 41
TOK_WHILE (264) 39
TOK_RETURN (265) 42 43
TOK_STRUCT (266) 8 9
TOK_NULL (267) 80
TOK_NEW (268) 66 67 68 69
TOK_ARRAY (269) 12 25
TOK_EQ (270) 52
TOK_NE (271) 53
TOK_LT (272) 54
TOK_LE (273) 55
TOK_GT (274) 56
TOK_GE (275) 57
TOK_IDENT (276) 8 9 12 13 18 25 26 67 70 73 74 76
TOK_INTCON (277) 77
TOK_CHARCON (278) 78
TOK_STRINGCON (279) 79
TOK_BLOCK (280)
TOK_CALL (281)
TOK_IFELSE (282)
TOK_INITDECL (283)
TOK_POS (284)
TOK_NEG (285)
TOK_NEWARRAY (286)
TOK_TYPEID (287)
TOK_FIELD (288)
TOK_ORD (289)
TOK_CHR (290)
TOK_ROOT (291)
TOK_DECLID (292)
TOK_PARAMLIST (293)
TOK_FUNCTION (294)
TOK_PROTOTYPE (295)
TOK_VARDECL (296)
TOK_RETURNVOID (297)
TOK_NEWSTRING (298)
TOK_INDEX (299)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
start (62)
    on left: 1, on right: 0
program (63)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (64)
    on left: 8 9, on right: 2
fielddecls (65)
    on left: 10 11, on right: 8 10
fielddecl (66)
    on left: 12 13, on right: 10 11
basetype (67)
    on left: 14 15 16 17 18, on right: 12 13 25 26 69
function (68)
    on left: 19 20 21 22, on right: 3
params (69)
    on left: 23 24, on right: 19 21 23
identdecl (70)
    on left: 25 26, on right: 19 20 21 22 23 24 38
block (71)
    on left: 27 28 29, on right: 19 20 32
statements (72)
    on left: 30 31, on right: 27 30
statement (73)
    on left: 32 33 34 35 36 37, on right: 4 30 31 39 40 41
vardecl (74)
    on left: 38, on right: 33
while (75)
    on left: 39, on right: 34
ifelse (76)
    on left: 40 41, on right: 35
return (77)
    on left: 42 43, on right: 36
expr (78)
    on left: 44 45 46 47 48 49 50, on right: 37 38 39 40 41 43 48 51
    52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 72 73 75 76
binop (79)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62, on right: 44
unop (80)
    on left: 63 64 65 66, on right: 45
allocator (81)
    on left: 67 68 69, on right: 46
call (82)
    on left: 70 71, on right: 47
multiexpr (83)
    on left: 72 73, on right: 71 72
variable (84)
    on left: 74 75 76, on right: 49
constant (85)
    on left: 77 78 79 80, on right: 50


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef   go to state 25
    basetype    go to state 26
    function    go to state 27
    identdecl   go to state 28
    block       go to state 29
    statements  go to state 30
    statement   go to state 31
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 44
    ';'  shift, and go to state 45


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   17 basetype: TOK_CHAR .

    $default  reduce using rule 17 (basetype)


State 7

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 8

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 9

   40 ifelse: TOK_IF . '(' expr ')' statement
   41       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 46


State 10

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 47


State 11

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    ';'            shift, and go to state 49
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 50
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 12

    8 structdef: TOK_STRUCT . TOK_IDENT fielddecls '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 51


State 13

   80 constant: TOK_NULL .

    $default  reduce using rule 80 (constant)


State 14

   66 unop: TOK_NEW . expr
   67 allocator: TOK_NEW . TOK_IDENT '(' ')'
   68          | TOK_NEW . TOK_STRING '(' expr ')'
   69          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 52
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype   go to state 54
    expr       go to state 55
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 15

   18 basetype: TOK_IDENT .
   70 call: TOK_IDENT . '(' ')'
   73 multiexpr: TOK_IDENT . '(' expr
   74 variable: TOK_IDENT .

    '('  shift, and go to state 56

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 74 (variable)


State 16

   77 constant: TOK_INTCON .

    $default  reduce using rule 77 (constant)


State 17

   78 constant: TOK_CHARCON .

    $default  reduce using rule 78 (constant)


State 18

   79 constant: TOK_STRINGCON .

    $default  reduce using rule 79 (constant)


State 19

   48 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 57
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 20

   28 block: '{' . '}'
   31 statements: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    '}'            shift, and go to state 58
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype    go to state 26
    identdecl   go to state 59
    block       go to state 29
    statements  go to state 30
    statement   go to state 60
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 21

   29 block: ';' .

    $default  reduce using rule 29 (block)


State 22

   63 unop: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 61
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 23

   64 unop: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 62
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 24

   65 unop: '!' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 63
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   25 identdecl: basetype . TOK_ARRAY TOK_IDENT
   26          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 64
    TOK_IDENT  shift, and go to state 65


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   19 function: identdecl . params ')' block
   20         | identdecl . '(' ')' block
   21         | identdecl . params ')' ';'
   22         | identdecl . '(' ')' ';'
   38 vardecl: identdecl . '=' expr ';'

    '('  shift, and go to state 66
    '='  shift, and go to state 67

    params  go to state 68


State 29

   32 statement: block .

    $default  reduce using rule 32 (statement)


State 30

   27 block: statements . '}'
   30 statements: statements . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    '}'            shift, and go to state 69
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype    go to state 26
    identdecl   go to state 59
    block       go to state 29
    statements  go to state 30
    statement   go to state 70
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


State 33

   34 statement: while .

    $default  reduce using rule 34 (statement)


State 34

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


State 35

   36 statement: return .

    $default  reduce using rule 36 (statement)


State 36

   37 statement: expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    ';'     shift, and go to state 78
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 37

   44 expr: binop .

    $default  reduce using rule 44 (expr)


State 38

   45 expr: unop .

    $default  reduce using rule 45 (expr)


State 39

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 40

   47 expr: call .

    $default  reduce using rule 47 (expr)


State 41

   71 call: multiexpr . ')'
   72 multiexpr: multiexpr . ',' expr

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 42

   49 expr: variable .

    $default  reduce using rule 49 (expr)


State 43

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 44

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 45

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 46

   40 ifelse: TOK_IF '(' . expr ')' statement
   41       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 88
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 47

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 89
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 48

   70 call: TOK_IDENT . '(' ')'
   73 multiexpr: TOK_IDENT . '(' expr
   74 variable: TOK_IDENT .

    '('  shift, and go to state 56

    $default  reduce using rule 74 (variable)


State 49

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 50

   43 return: TOK_RETURN expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    ';'     shift, and go to state 90
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 51

    8 structdef: TOK_STRUCT TOK_IDENT . fielddecls '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 91

    fielddecls  go to state 92


State 52

   16 basetype: TOK_STRING .
   68 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 93

    $default  reduce using rule 16 (basetype)


State 53

   18 basetype: TOK_IDENT .
   67 allocator: TOK_NEW TOK_IDENT . '(' ')'
   70 call: TOK_IDENT . '(' ')'
   73 multiexpr: TOK_IDENT . '(' expr
   74 variable: TOK_IDENT .

    '('  shift, and go to state 94

    '['       reduce using rule 18 (basetype)
    '['       [reduce using rule 74 (variable)]
    $default  reduce using rule 74 (variable)


State 54

   69 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 95


State 55

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   66 unop: TOK_NEW expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79

    $default  reduce using rule 66 (unop)


State 56

   70 call: TOK_IDENT '(' . ')'
   73 multiexpr: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    ')'            shift, and go to state 96
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 97
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 57

   48 expr: '(' expr . ')'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    ')'     shift, and go to state 98
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 58

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


State 59

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 67


State 60

   31 statements: '{' statement .

    $default  reduce using rule 31 (statements)


State 61

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63 unop: '+' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 63 (unop)


State 62

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   64 unop: '-' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 64 (unop)


State 63

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   65 unop: '!' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79

    $default  reduce using rule 65 (unop)


State 64

   25 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 99


State 65

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 66

   20 function: identdecl '(' . ')' block
   22         | identdecl '(' . ')' ';'
   24 params: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 100
    ')'         shift, and go to state 101

    basetype   go to state 26
    identdecl  go to state 102


State 67

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 103
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 68

   19 function: identdecl params . ')' block
   21         | identdecl params . ')' ';'
   23 params: params . ',' identdecl

    ')'  shift, and go to state 104
    ','  shift, and go to state 105


State 69

   27 block: statements '}' .

    $default  reduce using rule 27 (block)


State 70

   30 statements: statements statement .

    $default  reduce using rule 30 (statements)


State 71

   52 binop: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 106
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 72

   53 binop: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 107
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 73

   54 binop: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 108
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 74

   55 binop: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 109
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 75

   56 binop: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 110
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 76

   57 binop: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 111
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 77

   75 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 112
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 78

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


State 79

   76 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 113


State 80

   51 binop: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 114
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 81

   58 binop: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 115
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 82

   59 binop: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 116
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 83

   60 binop: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 117
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 84

   61 binop: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 118
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 85

   62 binop: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 119
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 86

   71 call: multiexpr ')' .

    $default  reduce using rule 71 (call)


State 87

   72 multiexpr: multiexpr ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 120
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 88

   40 ifelse: TOK_IF '(' expr . ')' statement
   41       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    ')'     shift, and go to state 121
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 89

   39 while: TOK_WHILE '(' expr . ')' statement
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    ')'     shift, and go to state 122
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 90

   43 return: TOK_RETURN expr ';' .

    $default  reduce using rule 43 (return)


State 91

    9 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
   11 fielddecls: '{' . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 100
    '}'         shift, and go to state 123

    fielddecl  go to state 124
    basetype   go to state 125


State 92

    8 structdef: TOK_STRUCT TOK_IDENT fielddecls . '}'
   10 fielddecls: fielddecls . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 100
    '}'         shift, and go to state 126

    fielddecl  go to state 127
    basetype   go to state 125


State 93

   68 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 128
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 94

   67 allocator: TOK_NEW TOK_IDENT '(' . ')'
   70 call: TOK_IDENT '(' . ')'
   73 multiexpr: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    ')'            shift, and go to state 129
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 97
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 95

   69 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    expr       go to state 130
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    multiexpr  go to state 41
    variable   go to state 42
    constant   go to state 43


State 96

   70 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 70 (call)


State 97

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   73 multiexpr: TOK_IDENT '(' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85

    $default  reduce using rule 73 (multiexpr)


State 98

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


State 99

   25 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 100

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 101

   20 function: identdecl '(' ')' . block
   22         | identdecl '(' ')' . ';'

    '{'  shift, and go to state 20
    ';'  shift, and go to state 131

    block       go to state 132
    statements  go to state 30


State 102

   24 params: '(' identdecl .

    $default  reduce using rule 24 (params)


State 103

   38 vardecl: identdecl '=' expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    ';'     shift, and go to state 133
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 104

   19 function: identdecl params ')' . block
   21         | identdecl params ')' . ';'

    '{'  shift, and go to state 20
    ';'  shift, and go to state 134

    block       go to state 135
    statements  go to state 30


State 105

   23 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 100

    basetype   go to state 26
    identdecl  go to state 136


State 106

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   52      | expr TOK_EQ expr .
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 52 (binop)


State 107

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   53      | expr TOK_NE expr .
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 53 (binop)


State 108

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   54      | expr TOK_LT expr .
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 54 (binop)


State 109

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   55      | expr TOK_LE expr .
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 55 (binop)


State 110

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   56      | expr TOK_GT expr .
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 56 (binop)


State 111

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   57      | expr TOK_GE expr .
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 57 (binop)


State 112

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   75         | expr '[' expr . ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    ']'     shift, and go to state 137
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 113

   76 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 76 (variable)


State 114

   51 binop: expr . '=' expr
   51      | expr '=' expr .
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85

    $default  reduce using rule 51 (binop)


State 115

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   58      | expr '+' expr .
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 58 (binop)


State 116

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   59      | expr '-' expr .
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85

    $default  reduce using rule 59 (binop)


State 117

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   60      | expr '*' expr .
   61      | expr . '/' expr
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79

    $default  reduce using rule 60 (binop)


State 118

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   61      | expr '/' expr .
   62      | expr . '%' expr
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79

    $default  reduce using rule 61 (binop)


State 119

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   62      | expr '%' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    '['  shift, and go to state 77
    '.'  shift, and go to state 79

    $default  reduce using rule 62 (binop)


State 120

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   72 multiexpr: multiexpr ',' expr .
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85

    $default  reduce using rule 72 (multiexpr)


State 121

   40 ifelse: TOK_IF '(' expr ')' . statement
   41       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype    go to state 26
    identdecl   go to state 59
    block       go to state 29
    statements  go to state 30
    statement   go to state 138
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 122

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype    go to state 26
    identdecl   go to state 59
    block       go to state 29
    statements  go to state 30
    statement   go to state 139
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 123

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


State 124

   11 fielddecls: '{' fielddecl . ';'

    ';'  shift, and go to state 140


State 125

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 141
    TOK_IDENT  shift, and go to state 142


State 126

    8 structdef: TOK_STRUCT TOK_IDENT fielddecls '}' .

    $default  reduce using rule 8 (structdef)


State 127

   10 fielddecls: fielddecls fielddecl . ';'

    ';'  shift, and go to state 143


State 128

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   68 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    ')'     shift, and go to state 144
    '['     shift, and go to state 77
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 129

   67 allocator: TOK_NEW TOK_IDENT '(' ')' .
   70 call: TOK_IDENT '(' ')' .

    TOK_EQ    reduce using rule 67 (allocator)
    TOK_EQ    [reduce using rule 70 (call)]
    TOK_NE    reduce using rule 67 (allocator)
    TOK_NE    [reduce using rule 70 (call)]
    TOK_LT    reduce using rule 67 (allocator)
    TOK_LT    [reduce using rule 70 (call)]
    TOK_LE    reduce using rule 67 (allocator)
    TOK_LE    [reduce using rule 70 (call)]
    TOK_GT    reduce using rule 67 (allocator)
    TOK_GT    [reduce using rule 70 (call)]
    TOK_GE    reduce using rule 67 (allocator)
    TOK_GE    [reduce using rule 70 (call)]
    ')'       reduce using rule 67 (allocator)
    ')'       [reduce using rule 70 (call)]
    '['       reduce using rule 67 (allocator)
    '['       [reduce using rule 70 (call)]
    ']'       reduce using rule 67 (allocator)
    ']'       [reduce using rule 70 (call)]
    ';'       reduce using rule 67 (allocator)
    ';'       [reduce using rule 70 (call)]
    ','       reduce using rule 67 (allocator)
    ','       [reduce using rule 70 (call)]
    '.'       reduce using rule 67 (allocator)
    '.'       [reduce using rule 70 (call)]
    '='       reduce using rule 67 (allocator)
    '='       [reduce using rule 70 (call)]
    '+'       reduce using rule 67 (allocator)
    '+'       [reduce using rule 70 (call)]
    '-'       reduce using rule 67 (allocator)
    '-'       [reduce using rule 70 (call)]
    '*'       reduce using rule 67 (allocator)
    '*'       [reduce using rule 70 (call)]
    '/'       reduce using rule 67 (allocator)
    '/'       [reduce using rule 70 (call)]
    '%'       reduce using rule 67 (allocator)
    '%'       [reduce using rule 70 (call)]
    $default  reduce using rule 67 (allocator)


State 130

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   69 allocator: TOK_NEW basetype '[' expr . ']'
   75 variable: expr . '[' expr ']'
   76         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 71
    TOK_NE  shift, and go to state 72
    TOK_LT  shift, and go to state 73
    TOK_LE  shift, and go to state 74
    TOK_GT  shift, and go to state 75
    TOK_GE  shift, and go to state 76
    '['     shift, and go to state 77
    ']'     shift, and go to state 145
    '.'     shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85


State 131

   22 function: identdecl '(' ')' ';' .
   29 block: ';' .

    $end           reduce using rule 22 (function)
    $end           [reduce using rule 29 (block)]
    error          reduce using rule 22 (function)
    error          [reduce using rule 29 (block)]
    TOK_VOID       reduce using rule 22 (function)
    TOK_VOID       [reduce using rule 29 (block)]
    TOK_CHAR       reduce using rule 22 (function)
    TOK_CHAR       [reduce using rule 29 (block)]
    TOK_INT        reduce using rule 22 (function)
    TOK_INT        [reduce using rule 29 (block)]
    TOK_STRING     reduce using rule 22 (function)
    TOK_STRING     [reduce using rule 29 (block)]
    TOK_IF         reduce using rule 22 (function)
    TOK_IF         [reduce using rule 29 (block)]
    TOK_WHILE      reduce using rule 22 (function)
    TOK_WHILE      [reduce using rule 29 (block)]
    TOK_RETURN     reduce using rule 22 (function)
    TOK_RETURN     [reduce using rule 29 (block)]
    TOK_STRUCT     reduce using rule 22 (function)
    TOK_STRUCT     [reduce using rule 29 (block)]
    TOK_NULL       reduce using rule 22 (function)
    TOK_NULL       [reduce using rule 29 (block)]
    TOK_NEW        reduce using rule 22 (function)
    TOK_NEW        [reduce using rule 29 (block)]
    TOK_IDENT      reduce using rule 22 (function)
    TOK_IDENT      [reduce using rule 29 (block)]
    TOK_INTCON     reduce using rule 22 (function)
    TOK_INTCON     [reduce using rule 29 (block)]
    TOK_CHARCON    reduce using rule 22 (function)
    TOK_CHARCON    [reduce using rule 29 (block)]
    TOK_STRINGCON  reduce using rule 22 (function)
    TOK_STRINGCON  [reduce using rule 29 (block)]
    '('            reduce using rule 22 (function)
    '('            [reduce using rule 29 (block)]
    '{'            reduce using rule 22 (function)
    '{'            [reduce using rule 29 (block)]
    ';'            reduce using rule 22 (function)
    ';'            [reduce using rule 29 (block)]
    '+'            reduce using rule 22 (function)
    '+'            [reduce using rule 29 (block)]
    '-'            reduce using rule 22 (function)
    '-'            [reduce using rule 29 (block)]
    '!'            reduce using rule 22 (function)
    '!'            [reduce using rule 29 (block)]
    $default       reduce using rule 22 (function)


State 132

   20 function: identdecl '(' ')' block .

    $default  reduce using rule 20 (function)


State 133

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


State 134

   21 function: identdecl params ')' ';' .
   29 block: ';' .

    $end           reduce using rule 21 (function)
    $end           [reduce using rule 29 (block)]
    error          reduce using rule 21 (function)
    error          [reduce using rule 29 (block)]
    TOK_VOID       reduce using rule 21 (function)
    TOK_VOID       [reduce using rule 29 (block)]
    TOK_CHAR       reduce using rule 21 (function)
    TOK_CHAR       [reduce using rule 29 (block)]
    TOK_INT        reduce using rule 21 (function)
    TOK_INT        [reduce using rule 29 (block)]
    TOK_STRING     reduce using rule 21 (function)
    TOK_STRING     [reduce using rule 29 (block)]
    TOK_IF         reduce using rule 21 (function)
    TOK_IF         [reduce using rule 29 (block)]
    TOK_WHILE      reduce using rule 21 (function)
    TOK_WHILE      [reduce using rule 29 (block)]
    TOK_RETURN     reduce using rule 21 (function)
    TOK_RETURN     [reduce using rule 29 (block)]
    TOK_STRUCT     reduce using rule 21 (function)
    TOK_STRUCT     [reduce using rule 29 (block)]
    TOK_NULL       reduce using rule 21 (function)
    TOK_NULL       [reduce using rule 29 (block)]
    TOK_NEW        reduce using rule 21 (function)
    TOK_NEW        [reduce using rule 29 (block)]
    TOK_IDENT      reduce using rule 21 (function)
    TOK_IDENT      [reduce using rule 29 (block)]
    TOK_INTCON     reduce using rule 21 (function)
    TOK_INTCON     [reduce using rule 29 (block)]
    TOK_CHARCON    reduce using rule 21 (function)
    TOK_CHARCON    [reduce using rule 29 (block)]
    TOK_STRINGCON  reduce using rule 21 (function)
    TOK_STRINGCON  [reduce using rule 29 (block)]
    '('            reduce using rule 21 (function)
    '('            [reduce using rule 29 (block)]
    '{'            reduce using rule 21 (function)
    '{'            [reduce using rule 29 (block)]
    ';'            reduce using rule 21 (function)
    ';'            [reduce using rule 29 (block)]
    '+'            reduce using rule 21 (function)
    '+'            [reduce using rule 29 (block)]
    '-'            reduce using rule 21 (function)
    '-'            [reduce using rule 29 (block)]
    '!'            reduce using rule 21 (function)
    '!'            [reduce using rule 29 (block)]
    $default       reduce using rule 21 (function)


State 135

   19 function: identdecl params ')' block .

    $default  reduce using rule 19 (function)


State 136

   23 params: params ',' identdecl .

    $default  reduce using rule 23 (params)


State 137

   75 variable: expr '[' expr ']' .

    $default  reduce using rule 75 (variable)


State 138

   40 ifelse: TOK_IF '(' expr ')' statement .
   41       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 146

    TOK_ELSE  [reduce using rule 40 (ifelse)]
    $default  reduce using rule 40 (ifelse)


State 139

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 140

   11 fielddecls: '{' fielddecl ';' .

    $default  reduce using rule 11 (fielddecls)


State 141

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 147


State 142

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 143

   10 fielddecls: fielddecls fielddecl ';' .

    $default  reduce using rule 10 (fielddecls)


State 144

   68 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 68 (allocator)


State 145

   69 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 69 (allocator)


State 146

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '('            shift, and go to state 19
    '{'            shift, and go to state 20
    ';'            shift, and go to state 21
    '+'            shift, and go to state 22
    '-'            shift, and go to state 23
    '!'            shift, and go to state 24

    basetype    go to state 26
    identdecl   go to state 59
    block       go to state 29
    statements  go to state 30
    statement   go to state 148
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    binop       go to state 37
    unop        go to state 38
    allocator   go to state 39
    call        go to state 40
    multiexpr   go to state 41
    variable    go to state 42
    constant    go to state 43


State 147

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 148

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)
